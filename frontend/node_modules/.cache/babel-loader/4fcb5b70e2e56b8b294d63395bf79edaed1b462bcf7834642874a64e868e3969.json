{"ast":null,"code":"var _jsxFileName = \"/Users/sinakhodadad/Documents/Projects/Flask_React/frontend/src/index.js\",\n  _s = $RefreshSig$();\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState, useEffect } from 'react';\nimport { createRoot } from \"react-dom/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nconst App = () => {\n  _s();\n  // State to hold the message fetched from the backend\n  const [message, setMessage] = useState('');\n  // State to hold any errors that occur during the fetch operation\n  const [error, setError] = useState(null);\n\n  // useEffect hook to fetch data from the backend when the component mounts\n  useEffect(() => {\n    fetch('/api/hello') // Fetch request to the proxied endpoint\n    .then(response => {\n      // Check if the response is not okay (e.g., 404 or 500 errors)\n      if (!response.ok) {\n        throw new Error('Network response was not ok ' + response.statusText);\n      }\n      return response.json(); // Parse the response as JSON\n    }).then(data => setMessage(data.message)) // Update the message state with the fetched data\n    .catch(error => {\n      console.error('There has been a problem with your fetch operation:', error);\n      setError(error.toString()); // Update the error state if there's an error\n    });\n  }, []); // Empty dependency array means this runs once after the initial render\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 16\n    }, this) : message\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"zBUwQHLzJNNB4Qp8fI6Cd5x68tc=\");\n_c = App;\nroot.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 40,\n  columnNumber: 3\n}, this));\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","createRoot","jsxDEV","_jsxDEV","rootElement","document","getElementById","root","App","_s","message","setMessage","error","setError","fetch","then","response","ok","Error","statusText","json","data","catch","console","toString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","render","$RefreshReg$"],"sources":["/Users/sinakhodadad/Documents/Projects/Flask_React/frontend/src/index.js"],"sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState, useEffect } from 'react';\nimport { createRoot } from \"react-dom/client\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nconst App = () => {\n  // State to hold the message fetched from the backend\n  const [message, setMessage] = useState('');\n  // State to hold any errors that occur during the fetch operation\n  const [error, setError] = useState(null);\n\n  // useEffect hook to fetch data from the backend when the component mounts\n  useEffect(() => {\n    fetch('/api/hello') // Fetch request to the proxied endpoint\n      .then(response => {\n        // Check if the response is not okay (e.g., 404 or 500 errors)\n        if (!response.ok) {\n          throw new Error('Network response was not ok ' + response.statusText);\n        }\n        return response.json(); // Parse the response as JSON\n      })\n      .then(data => setMessage(data.message)) // Update the message state with the fetched data\n      .catch(error => {\n        console.error('There has been a problem with your fetch operation:', error);\n        setError(error.toString()); // Update the error state if there's an error\n      });\n  }, []); // Empty dependency array means this runs once after the initial render\n\n  return (\n    <div className='app'>\n      {/* Conditionally render the error message if there is an error, otherwise render the fetched message */}\n      {error ? <div className='error'>{error}</div> : message}\n    </div>\n  );\n};\n\nroot.render(\n  <App />\n);\n\n"],"mappings":";;AAAA,OAAO,sCAAsC;AAC7C,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,UAAU,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;AACnD,MAAMC,IAAI,GAAGN,UAAU,CAACG,WAAW,CAAC;AAEpC,MAAMI,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC1C;EACA,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IACdc,KAAK,CAAC,YAAY,CAAC,CAAC;IAAA,CACjBC,IAAI,CAACC,QAAQ,IAAI;MAChB;MACA,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,GAAGF,QAAQ,CAACG,UAAU,CAAC;MACvE;MACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC,CAAC,CACDL,IAAI,CAACM,IAAI,IAAIV,UAAU,CAACU,IAAI,CAACX,OAAO,CAAC,CAAC,CAAC;IAAA,CACvCY,KAAK,CAACV,KAAK,IAAI;MACdW,OAAO,CAACX,KAAK,CAAC,qDAAqD,EAAEA,KAAK,CAAC;MAC3EC,QAAQ,CAACD,KAAK,CAACY,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACErB,OAAA;IAAKsB,SAAS,EAAC,KAAK;IAAAC,QAAA,EAEjBd,KAAK,gBAAGT,OAAA;MAAKsB,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAEd;IAAK;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,GAAGpB;EAAO;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpD,CAAC;AAEV,CAAC;AAACrB,EAAA,CA7BID,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AA+BTD,IAAI,CAACyB,MAAM,eACT7B,OAAA,CAACK,GAAG;EAAAmB,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAE,CACR,CAAC;AAAC,IAAAC,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}